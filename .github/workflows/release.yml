name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.2.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog generation
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv || pip install build
        pip install twine
    
    - name: Build package
      run: |
        # Try building with uv first, fallback to python -m build
        if command -v uv &> /dev/null; then
          uv build
        else
          python -m build
        fi
    
    - name: Check package
      run: |
        twine check dist/*
        ls -la dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-package:
    name: Test Package Installation
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        # Install the wheel file
        pip install dist/*.whl
        # Test import
        python -c "import omniconfig; print(f'OmniConfig {omniconfig.__version__} installed successfully')"
        # Test basic functionality
        python -c "from omniconfig import OmniConfigParser; parser = OmniConfigParser(); print('Basic functionality test passed')"

  publish-testpypi:
    name: Publish to TestPyPI
    needs: test-package
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/omniconfig
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish-pypi:
    name: Publish to PyPI
    needs: test-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Only on tags
    environment:
      name: pypi
      url: https://pypi.org/p/omniconfig
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  create-release:
    name: Create GitHub Release
    needs: [publish-pypi, publish-testpypi]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found, using initial commit"
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        # Generate changelog
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        
        # Get commit messages
        git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" >> changelog.md
        
        echo "" >> changelog.md
        echo "## Contributors" >> changelog.md
        echo "" >> changelog.md
        
        # Get contributors
        git log ${PREV_TAG}..HEAD --pretty=format:"* @%an" | sort -u >> changelog.md
        
        # Set output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## ðŸŽ‰ OmniConfig ${{ github.ref_name }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ```bash
          pip install omniconfig==${{ github.ref_name }}
          ```
          
          ## Documentation
          
          See the [README](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md) for usage instructions.
          
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
        generate_release_notes: true