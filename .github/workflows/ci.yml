name: CI

on:
  push:
    branches: [ main, dev, "dev/*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.13"]
        include:
          # Test on older Python versions only on Ubuntu to save CI time
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.10"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=omniconfig --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
        pip install -e .
    
    - name: Check code formatting with ruff
      run: |
        ruff format --check --diff src/ tests/
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        # Install doc dependencies if they exist
        if [ -f "docs/requirements.txt" ]; then
          pip install -r docs/requirements.txt
        fi
    
    - name: Build documentation
      run: |
        # Try to build docs if configured
        if [ -d "docs" ]; then
          cd docs
          if [ -f "Makefile" ]; then
            make html
          elif [ -f "build.py" ]; then
            python build.py
          fi
        else
          echo "No docs directory found, skipping documentation build"
        fi

  security:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
    
    - name: Security check with bandit
      run: |
        bandit -r src/omniconfig/ -ll -f json -o bandit-report.json || true
        echo "Bandit security scan completed"
    
    - name: Check for known vulnerabilities
      run: |
        pip install -e .
        safety check --json || true
        echo "Safety vulnerability check completed"

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        # Try uv first, fallback to pip
        pip install uv || pip install build
        pip install twine
    
    - name: Build package
      run: |
        # Try building with uv first, fallback to python -m build
        if command -v uv &> /dev/null; then
          uv build
        else
          python -m build
        fi
    
    - name: Check package
      run: |
        twine check dist/*
        ls -la dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/