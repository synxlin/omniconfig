name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-commits:
    name: Check Commit Messages
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check commit messages
      run: |
        # Check if commits follow conventional format
        commits=$(git log --format="%s" origin/${{ github.base_ref }}..HEAD)
        echo "Checking commit messages..."
        
        invalid_commits=""
        while IFS= read -r commit; do
          if ! echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
            invalid_commits="${invalid_commits}\n  - ${commit}"
          fi
        done <<< "$commits"
        
        if [ -n "$invalid_commits" ]; then
          echo "Invalid commit messages found:"
          echo -e "$invalid_commits"
          echo ""
          echo "Please use conventional commit format: type(scope): description"
          echo "Valid types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
          exit 1
        fi
        
        echo "All commit messages are valid!"

  check-size:
    name: Check PR Size
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check PR size
      run: |
        # Count changes
        changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
        additions=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum+=$1} END {print sum}')
        deletions=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum+=$2} END {print sum}')
        
        echo "PR Statistics:"
        echo "  Changed files: $changed_files"
        echo "  Additions: $additions"
        echo "  Deletions: $deletions"
        
        # Warn if PR is too large
        if [ "$changed_files" -gt 50 ] || [ "$additions" -gt 1000 ]; then
          echo "::warning::This PR is quite large. Consider breaking it into smaller PRs."
        fi

  label-pr:
    name: Auto Label PR
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Label PR based on files changed
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get changed files
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const labels = new Set();
          
          // Determine labels based on files
          for (const file of files) {
            if (file.filename.startsWith('src/')) {
              labels.add('source');
            }
            if (file.filename.startsWith('tests/')) {
              labels.add('tests');
            }
            if (file.filename.startsWith('docs/')) {
              labels.add('documentation');
            }
            if (file.filename.includes('.github/')) {
              labels.add('ci/cd');
            }
            if (file.filename === 'setup.py' || file.filename === 'pyproject.toml') {
              labels.add('dependencies');
            }
          }
          
          // Determine size label
          const additions = files.reduce((sum, file) => sum + file.additions, 0);
          const deletions = files.reduce((sum, file) => sum + file.deletions, 0);
          const total = additions + deletions;
          
          if (total < 10) {
            labels.add('size/XS');
          } else if (total < 50) {
            labels.add('size/S');
          } else if (total < 200) {
            labels.add('size/M');
          } else if (total < 500) {
            labels.add('size/L');
          } else {
            labels.add('size/XL');
          }
          
          // Apply labels
          if (labels.size > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: Array.from(labels)
            });
          }

  coverage-comment:
    name: Post Coverage Comment
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=omniconfig --cov-report=term --cov-report=json
    
    - name: Comment coverage on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage data
          let coverage = 'Coverage data not available';
          try {
            const coverageData = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
            const totalCoverage = coverageData.totals.percent_covered.toFixed(2);
            coverage = `📊 **Test Coverage: ${totalCoverage}%**`;
            
            if (totalCoverage < 80) {
              coverage += ' ⚠️ (Below target)';
            } else if (totalCoverage < 95) {
              coverage += ' 📈 (Good coverage)';
            } else {
              coverage += ' ✅ (Excellent coverage)';
            }
          } catch (e) {
            console.log('Could not read coverage data:', e);
          }
          
          // Find and update or create comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Test Coverage')
          );
          
          const body = `## 🤖 Automated PR Check\n\n${coverage}\n\n---\n*Updated at ${new Date().toISOString()}*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
          }